const app = {
  // https://github.com/docker-library/mongo/issues/257#issuecomment-824117838
  user: _getEnv('APP_DB_USER'),
  pwd: _getEnv('APP_DB_PW'),
  roles: [
    {
      role: 'readWrite',
      db: _getEnv('MONGO_INITDB_DATABASE'),
    },
  ],
}

db.createUser(app)
db.auth(app.user, app.pwd)

// TODO: have this seed data generated by the plugin test suites,
// and consume as a json document on init instead
const reactApp = (appName) => {
  return {
    report: {
      _id: appName,
      name: appName,
      dependencies: [
        {
          type: 'ES6',
          import: [
            {
              type: 'default',
              name: 'react',
            },
          ],
          module: 'react',
          source: 'src/example-login.tsx',
          external: true,
        },
        {
          type: 'ES6',
          import: [
            {
              type: 'default',
              name: 'ReactDOM',
            },
          ],
          module: 'react-dom',
          source: 'src/example-login.tsx',
          external: true,
        },
        {
          type: 'ES6',
          import: [
            {
              type: 'default',
              name: 'singleSpaReact',
            },
          ],
          module: 'single-spa-react',
          source: 'src/example-login.tsx',
          external: false,
        },
        {
          type: 'ES6',
          import: [
            {
              type: 'default',
              name: 'React',
            },
          ],
          module: 'react',
          source: 'src/root.component.tsx',
          external: true,
        },
        {
          type: 'ES6',
          import: [
            {
              type: 'specifier',
              name: 'setPublicPath',
            },
          ],
          module: 'systemjs-webpack-interop',
          source: 'src/set-public-path.tsx',
          external: false,
        },
      ],
    },
    graph: {
      _id: appName,
      links: [
        {
          source: appName,
          target: 'react::shared',
        },
        {
          source: appName,
          target: 'react-dom::shared',
        },
        {
          source: appName,
          target: `single-spa-react::${appName}`,
        },
        {
          source: appName,
          target: `systemjs-webpack-interop::${appName}`,
        },
      ],
      nodes: [
        {
          id: appName,
          group: 'application',
        },
        {
          id: 'react::shared',
          name: 'react',
          group: 'dependency::shared',
        },
        {
          id: 'react-dom::shared',
          name: 'react-dom',
          group: 'dependency::shared',
        },
        {
          id: `single-spa-react::${appName}`,
          name: 'single-spa-react',
          group: `dependency::${appName}`,
        },
        {
          id: `systemjs-webpack-interop::${appName}`,
          name: 'systemjs-webpack-interop',
          group: `dependency::${appName}`,
        },
      ],
    },
  }
}

const svelteApp = (appName) => {
  return {
    report: {
      _id: appName,
      name: appName,
      dependencies: [
        {
          type: 'ES6',
          import: [
            { type: 'specifier', name: 'onDestroy' },
            { type: 'specifier', name: 'onMount' },
          ],
          module: 'svelte',
          source: 'src/App.svelte',
          external: false,
        },
        {
          type: 'ES6',
          import: [{ type: 'specifier', name: 'fromEvent' }],
          module: 'rxjs',
          source: 'src/App.svelte',
          external: true,
        },
        {
          type: 'ES6',
          import: [{ type: 'specifier', name: 'sampleTime' }],
          module: 'rxjs/operators',
          source: 'src/App.svelte',
          external: false,
        },
        {
          type: 'ES6',
          import: [{ type: 'default', name: 'singleSpaSvelte' }],
          module: 'single-spa-svelte',
          source: 'src/example-nav.js',
          external: false,
        },
      ],
    },
    graph: {
      _id: appName,
      links: [
        { source: appName, target: `svelte::${appName}` },
        { source: appName, target: 'rxjs::shared' },
        { source: appName, target: `rxjs/operators::${appName}` },
        { source: appName, target: `single-spa-svelte::${appName}` },
      ],
      nodes: [
        { id: appName, group: 'application' },
        {
          id: `svelte::${appName}`,
          name: 'svelte',
          group: `dependency::${appName}`,
        },
        { id: 'rxjs::shared', name: 'rxjs', group: 'dependency::shared' },
        {
          id: `rxjs/operators::${appName}`,
          name: 'rxjs/operators',
          group: `dependency::${appName}`,
        },
        {
          id: `single-spa-svelte::${appName}`,
          name: 'single-spa-svelte',
          group: `dependency::${appName}`,
        },
      ],
    },
  }
}

const applications = [
  reactApp('@example/home'),
  reactApp('@example/tasks'),
  svelteApp('@example/login'),
].forEach(({ report, graph }) => {
  print(`Adding report for ${report.name}`)
  printjson(report)
  db.reports.insertOne(report)
  print(`Adding graph for ${report.name}`)
  printjson(graph)
  db.graphs.insertOne(graph)
})
